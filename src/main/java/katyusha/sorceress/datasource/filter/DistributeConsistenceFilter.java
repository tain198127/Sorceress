/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package katyusha.sorceress.datasource.filter;

/**
 * @author Created by DaneBrown on 29/05/2018
 * Email:tain198127@163.com All Right Reserved
 */

import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.filter.FilterEventAdapter;
import com.alibaba.druid.proxy.jdbc.CallableStatementProxy;
import com.alibaba.druid.proxy.jdbc.ConnectionProxy;
import com.alibaba.druid.proxy.jdbc.DataSourceProxy;
import com.alibaba.druid.proxy.jdbc.PreparedStatementProxy;
import com.alibaba.druid.proxy.jdbc.ResultSetProxy;
import com.alibaba.druid.proxy.jdbc.StatementProxy;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.util.Properties;

/**
 * define a set of DC filter feature
 */
public abstract class DistributeConsistenceFilter extends FilterEventAdapter implements DistributeConsistenceMBean{
    private boolean logDistributeLock = false;
    private boolean logSlowSql = false;
    private boolean disabledConsistence = false;

    public boolean isLogDistributeLock() {
        return logDistributeLock;
    }

    public void setLogDistributeLock(boolean logDistributeLock) {
        this.logDistributeLock = logDistributeLock;
    }

    public boolean isLogSlowSql() {
        return logSlowSql;
    }

    public void setLogSlowSql(boolean logSlowSql) {
        this.logSlowSql = logSlowSql;
    }

    public boolean isDisabledConsistence() {
        return disabledConsistence;
    }

    public void setDisabledConsistence(boolean disabledConsistence) {
        this.disabledConsistence = disabledConsistence;
    }
    /*FilterAdapter*/

    @Override public ConnectionProxy connection_connect(FilterChain chain, Properties info) throws SQLException {
        return super.connection_connect(chain, info);
    }

    @Override public void connection_connectBefore(FilterChain chain, Properties info) {
        super.connection_connectBefore(chain, info);
    }

    @Override public void connection_connectAfter(ConnectionProxy connection) {
        super.connection_connectAfter(connection);
    }

    @Override public CallableStatementProxy connection_prepareCall(FilterChain chain, ConnectionProxy connection,
        String sql) throws SQLException {
        return super.connection_prepareCall(chain, connection, sql);
    }

    @Override
    public CallableStatementProxy connection_prepareCall(FilterChain chain, ConnectionProxy connection, String sql,
        int resultSetType, int resultSetConcurrency) throws SQLException {
        return super.connection_prepareCall(chain, connection, sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatementProxy connection_prepareCall(FilterChain chain, ConnectionProxy connection, String sql,
        int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return super.connection_prepareCall(chain, connection, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection,
        String sql) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
        int autoGeneratedKeys) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql, autoGeneratedKeys);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
        int resultSetType, int resultSetConcurrency) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
        int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
        int[] columnIndexes) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql, columnIndexes);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql,
        String[] columnNames) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql, columnNames);
    }

    @Override
    public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql) throws SQLException {
        return super.statement_execute(chain, statement, sql);
    }

    @Override public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql,
        int autoGeneratedKeys) throws SQLException {
        return super.statement_execute(chain, statement, sql, autoGeneratedKeys);
    }

    @Override public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql,
        int[] columnIndexes) throws SQLException {
        return super.statement_execute(chain, statement, sql, columnIndexes);
    }

    @Override public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql,
        String[] columnNames) throws SQLException {
        return super.statement_execute(chain, statement, sql, columnNames);
    }

    @Override
    public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql) throws SQLException {
        return super.statement_executeUpdate(chain, statement, sql);
    }

    @Override public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql,
        int autoGeneratedKeys) throws SQLException {
        return super.statement_executeUpdate(chain, statement, sql, autoGeneratedKeys);
    }

    @Override public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql,
        int[] columnIndexes) throws SQLException {
        return super.statement_executeUpdate(chain, statement, sql, columnIndexes);
    }

    @Override public int statement_executeUpdate(FilterChain chain, StatementProxy statement, String sql,
        String[] columnNames) throws SQLException {
        return super.statement_executeUpdate(chain, statement, sql, columnNames);
    }

    @Override
    public ResultSetProxy statement_getResultSet(FilterChain chain, StatementProxy statement) throws SQLException {
        return super.statement_getResultSet(chain, statement);
    }

    @Override
    public boolean preparedStatement_execute(FilterChain chain, PreparedStatementProxy statement) throws SQLException {
        return super.preparedStatement_execute(chain, statement);
    }

    @Override public int preparedStatement_executeUpdate(FilterChain chain,
        PreparedStatementProxy statement) throws SQLException {
        return super.preparedStatement_executeUpdate(chain, statement);
    }

    @Override protected void statementCreateAfter(StatementProxy statement) {
        super.statementCreateAfter(statement);
    }

    @Override protected void statementPrepareAfter(PreparedStatementProxy statement) {
        super.statementPrepareAfter(statement);
    }

    @Override protected void statementPrepareCallAfter(CallableStatementProxy statement) {
        super.statementPrepareCallAfter(statement);
    }

    @Override protected void resultSetOpenAfter(ResultSetProxy resultSet) {
        super.resultSetOpenAfter(resultSet);
    }

    @Override protected void statementExecuteUpdateBefore(StatementProxy statement, String sql) {
        super.statementExecuteUpdateBefore(statement, sql);
    }

    @Override protected void statementExecuteUpdateAfter(StatementProxy statement, String sql, int updateCount) {
        super.statementExecuteUpdateAfter(statement, sql, updateCount);
    }

    @Override protected void statementExecuteQueryBefore(StatementProxy statement, String sql) {
        super.statementExecuteQueryBefore(statement, sql);
    }

    @Override
    protected void statementExecuteQueryAfter(StatementProxy statement, String sql, ResultSetProxy resultSet) {
        super.statementExecuteQueryAfter(statement, sql, resultSet);
    }

    @Override protected void statementExecuteBefore(StatementProxy statement, String sql) {
        super.statementExecuteBefore(statement, sql);
    }

    @Override protected void statementExecuteAfter(StatementProxy statement, String sql, boolean result) {
        super.statementExecuteAfter(statement, sql, result);
    }

    @Override protected void statementExecuteBatchBefore(StatementProxy statement) {
        super.statementExecuteBatchBefore(statement);
    }

    @Override protected void statementExecuteBatchAfter(StatementProxy statement, int[] result) {
        super.statementExecuteBatchAfter(statement, result);
    }

    @Override protected void statement_executeErrorAfter(StatementProxy statement, String sql, Throwable error) {
        super.statement_executeErrorAfter(statement, sql, error);
    }

    @Override public void init(DataSourceProxy dataSource) {
        super.init(dataSource);
    }

    @Override public void destroy() {
        super.destroy();
    }

    @Override public void connection_close(FilterChain chain, ConnectionProxy connection) throws SQLException {
        super.connection_close(chain, connection);
    }

    @Override public void connection_commit(FilterChain chain, ConnectionProxy connection) throws SQLException {
        super.connection_commit(chain, connection);
    }

    @Override
    public String connection_nativeSQL(FilterChain chain, ConnectionProxy connection, String sql) throws SQLException {
        return super.connection_nativeSQL(chain, connection, sql);
    }

    @Override public void connection_rollback(FilterChain chain, ConnectionProxy connection) throws SQLException {
        super.connection_rollback(chain, connection);
    }

    @Override public void connection_rollback(FilterChain chain, ConnectionProxy connection,
        Savepoint savepoint) throws SQLException {
        super.connection_rollback(chain, connection, savepoint);
    }
    /*FilterEventAdapter*/


}
